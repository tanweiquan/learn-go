【网络协议】HTTP如何保持登录状态？
难度：简单
考点：对Cookie、Session和Token的了解和使用程度
参考：
* 由于HTTP是无状态协议，所以已经登录成功的用户其状态没有办法在协议层面保存下来，所以常规思路是借助cookie+session或者是Token的方式来保持；
* 举个例子：用户提交的账号和密码经过服务器认证后会生成session并将sessionID写入cookie，用户后续的请求中通过cookie将sessionID带回来服务端来保持状态的追踪；
拓展：
1. cookie和session的主要区别在于cookie保存在客户端，session保存在服务端，因此Session会更加安全，但当量大时会过多消耗系统内存（优缺点）；
2. 使用cookie需要小心会话劫持和XSS（可以设置HttpOnly处理）和跨站请求伪造问题CSRF；
3. 使用cookie来管理session在单机下问题不大，但如果是服务器集群或者要求跨域认证时则不好处理（扩展性不好），需要考虑将session持久化，即将session写入持久层，或者考虑使用jwt；
4. cookie和session的主要区别在于cookie保存在客户端，Session保存在服务端，因此Session会更加安全，但当量大时会过多消耗系统内存资源（优缺点）；
5. 服务器不保存session，而是将所有用户数据保存在客户端中，每次请求均返回服务器，jwt（json web tokens）就是这样的代表，优点是服务器变成无状态从而比较容易扩展；
6. jwt由header+payload+signature组成，经过base64编码（base64可解码，不算加密），对单点登录友好，对单页应用/移动应用也友好，但也存在token时效问题（退出登录、修改密码等场景后token依然有效）、token续签（新旧token如何平滑切换）问题；
7. cookie和session的主要区别在于cookie保存在客户端，session保存在服务端，因此session会更加安全，但当量大时会过多消耗系统内存资源（优缺点）；
8. 一般场景下可以使用cookie+session的即可，如果是单页应用、单点登录、服务集群或者需要频繁跨域的场景可以考虑使用jwt；
-------------------------------------------------------------------------------------------------------------------------------------------
【网络协议】HTTP 方法中 GET 和 POST 的区别；
难度：简单
考点：对HTTP常用方法的了解程度
参考：
* Get和Post方法在本质上没有区别，底层走得都是TCP/IP协议，但在语义和使用上有区别；
* 在Restful中Get表达的是查询资源，Post是创建资源的意思，且Get方法是幂等的，而Post方法是非幂等的；(冥等就是就是同一个动作，无论操作多少次，都是得到同样的结果。)
* 另外在一些小细节上也有一定的区别，比如说Get方法的参数放在URL中，且长度有限制，而Post的参数常规放在Body中，大小不做限制等；
【网络协议】谈一下HTTP2相比HTTP1.1做了哪些改进？
 http2.0相比于http1.1，做了以下改进：
1、新的二进制格式，http1.x的解析是基于文本的。
2、http2.0是长连接多路复用的，是并行的，避免了对头阻塞。
3、http2.0的header压缩，避免了重复的header的传输，减少了需要传输的大小。
4、多了服务端推送功能（server push）。
-------------------------------------------------------------------------------------------------------------------------------------------
【网络协议】HTTPS和HTTP的区别是什么？
难度：简单
考点：对称加密和非对称加密的原理以及他们如何配合使用
参考：
* HTTP是超文本传输协议，明文传输，在安全性上有很多不足：1、没有验证通信双方的身份存在伪装的可能 2、通信使用明文存在被窃听的可能 3、无法验证报文的完整性存在篡改的可能；
* HTTPS是在HTTP协议下添加了一层SSL协议，将HTTP直接和TCP通信改成HTTP先和SSL通信，再由SSL协议和TCP协议通信，来实现防伪装、防窃听、防篡改；

扩展：
* 公开密钥加密：使用一对非对称的密钥（即一把私钥一把公钥），发送方使用公钥加密，使用方再通过私钥解密；
* 共享密钥加密：使用同一个密钥进行加密解密（对称加密）；
-------------------------------------------------------------------------------------------------------------------------------------------
【网络协议】谈一下HTTPS的加密过程/证书交换过程；
参考：
1. 首先是客户端发起HTTPS请求；
2. 随后服务端将证书传递给客户端，证书包含公钥和其他信息；
3. 客户端拿到证书后开始校验有效性，比如颁发机构、证书时间等等；
4. 验证后效后客户端会生成一个随机值并使用证书中的公钥进行加密然后发给服务端；
5. 服务端使用私钥进行解密后就能得到客户端生成的随机值，这里用的是非对称机密技术；
6. 最后服务端会使用这个随机值当做密钥，对通信的内容进行加密并返回给客户端，这里用的就是对称加密技术；
-------------------------------------------------------------------------------------------------------------------------------------------
【网络协议】谈一下对Websocket的理解？
参考：WebSocket 是一种在客户端和服务器之间保持TCP长连接的网络协议，为了兼容现有浏览器的握手规范，WebSocket连接是在HTTP的基础上完成升级。整个过程简单来说分成以下几个步骤：
1. 客户端发起一个简单请求，并且在请求的Header中添加两个关键请求头：connection 和 upgrade。connection 表示此次连接需要升级，值为 upgrade；upgrade 表示此次需要升级为的协议，如websocket；
2. 如果服务端同意升级，则会返回 101 switch protocol（交换协议）响应码，升级完成后连接变成全双工（双向通信）的连接；如果服务器无法升级，则会忽略升级请求头，返回一个常规的状态码，如 200；
3. 常规的框架中，如前端使用的 websocket 函数，它内部已经封装好了 http 请求以及添加升级的请求头，我们可以直接使用；

拓展：
为什么需要websocket，举个例子，当前端需要自动更新页面数据时，可以有以下方案：

1. AJAX 轮询：间隔单位时间后重复发起http请求；
2. HTTP长连接：使用 Keep-Alive 消息头并挂起客户端的请求，等服务端存在消息时再响应；
3. Keep-Alive：通用消息头，可以设置链接的超时时长和最大请求数，即可以在一次 TCP 握手后处理多个 HTTP 请求；
4.使用websocket