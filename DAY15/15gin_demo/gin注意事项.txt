Restful api：
Rest架构与非Rest架构的区别是：
Rest架构的URL只指定资源，以HTTP方法动词进行不同的操作。用HTTP STATUS/CODE定义操作结果。
非Rest架构以不同的URL（主要为使用动词）进行不同的操作。/版本号/资源路径

Restful的url：/版本号/资源路径。如：/v1/tags/{tag_id}
1、版本号 	
命名版本号可以解决版本不兼容问题，在设计 RESTful API 的一种实用的做法是使用版本号。一般情况下，我们会在 url 中保留旧版本号，并同时兼容多个版本
2、资源路径 
URI 不能包含动词，只能是名词（命名名词的时候，要使用小写、数字及下划线来区分多个单词）。
资源的路径应该从根到子依次如下:
/{资源集合}/{资源id}/{子资源集合}/{子资源id}/{子资源属性}	
当资源无法使用标准rest架构来命名时，使用一些特殊的aciton来命名：/{资源集合}/{资源id}/actions/{操作}
3、查询参数：url提供参数，过滤返回结构。
4、响应参数：json格式
5、请求方式：
GET：查询/查看
POST：新建
PUT：更新全部字段
PACTH：更新部分字段（少用）
DELETE：删除
6、状态码：
200段：操作成功
300段：参数有问题（其中303和304分别是token过期和无效）
400段：请求地址方面有问题。
500段：表示内部代码有问题（其中500表示服务器代码异常）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
MVC：
经典MVC模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。
M即model模型是指模型表示业务规则。
V即View视图是指用户看到并与之交互的界面。
C即controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。
在gin中mvc架构是：用户在C中访问M，调用M的方法，获得或修改了数据，然后通过V渲染了页面。
M：公共的方法 model
V：模板 templates
C：控制器 controller

基本代码结构：
├──api
│    ├── apis
│    │    └── user.go      ----->控制器函数(入参检查，调用models中结构体绑定的model公共方法来向对数据库中的表做增删改查操作，并给浏览器返回响应数据并渲染页面)
│    ├── database
│    │    └── mysql.go    ----->连接数据库
│    ├── models
│    │    └── user.go      ----->公共的方法：定义结构体，绑定对数据库表做增删改查的方法。[调用DB操作数据库]     dao层
│    └── router
│         └──  router.go    ----->定义不同请求的路由集合，封装成一个路由函数
└──main.go                   ----->脚手架，主程序入口。调用路由函数，写运行IP和端口

具体：
企业代码MVC结构：
函数调用：前端<---action<---service<---dao<---database (前端代码要调用action，action代码要调用service函数，service函数要调用到dao函数，dao函数要调用database函数)

因此程序员写代码：database--->dao--->service--->action/前端
关系：Service层是建立在DAO层之上的，建立了DAO层后才可以建立Service层，而Service层又是在Controller层之下的，因而Service层应该既调用DAO层的接口，又要提供接口给Controller层的类来进行调用，它刚好处于一个中间层的位置。每个模型都有一个Service接口，每个接口分别封装各自的业务处理方法。 
1、database：数据库连接
2、dao层：dao层主要做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此。设计接口，定义结构体，绑定操作数据库的方法(增删改查)，供service层使用
3、service层：首先设计接口，再设计其实现类，绑定业务中要实现操作数据库的方法，方法中要调用dao层接口，操作数据库。
4、controller层：调用service层的接口来控制业务流程。即在给前端/浏览器响应数据并渲染页面的流程控制(什么时候返回数据或渲染页面的哪个地方)，需要调用service接口实现。
5、view层：view层与控制层结合比较紧密，需要二者结合起来协同开发。view层主要负责前台jsp页面的显示，存放着前端的模板文件。
