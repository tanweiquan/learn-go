package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

//net/http server
//服务端

func f1(w http.ResponseWriter, r *http.Request) {
	b, err := ioutil.ReadFile("./xx.html")
	if err != nil {
		w.Write([]byte(fmt.Sprintf("%v", err)))
	}
	w.Write(b)
}
func f2(w http.ResponseWriter, r *http.Request) {
	// fmt.Println(r.URL)
	// fmt.Println(r.Method)
	// fmt.Println(ioutil.ReadAll(r.Body)) //我在服务端打印客户端发来的请求的body
	// w.Write([]byte("ok"))
	queryParam := r.URL.Query() //自动帮我们识别URL中的query param
	name := queryParam.Get("name")
	age := queryParam.Get("age")
	fmt.Println(name, age)
	fmt.Println(r.Method)
	fmt.Println(ioutil.ReadAll(r.Body))
	w.Write([]byte("ok"))
}
func main() {
	//访问不同网页，执行不同函数
	http.HandleFunc("/posts/Go/15_socket/", f1)
	http.HandleFunc("/hello/", f2)

	//创建服务端要监听的客户端ip，端口
	//ListenAndServe是整个服务运行的总入口，监听http的端口
	http.ListenAndServe("0.0.0.0:9090", nil) //同在一个网络下任意ip的客户端都可以通过使用服务端设备机器的ip访问到服务端

	//服务端监听：127.0.0.1 [ 本机虚拟网卡的ip ]
	//本机只能通过127.0.0.1访问位于本机的服务端，不能通过本机IP访问

	//服务端监听：本机的IP [ 指的是本机物理网卡(无线网卡和有限网卡)所绑定的网络协议地址ip ]
	//本机不能通过127.0.0.1访问位于本机的服务端，本网络主机的客户端都能通过服务端的IP访问位于本机的服务端

	//服务端监听：0.0.0.0 [ 即代表本机的所有ip地址，127.0.0.1和本机地址ip都包含了 ]
	//本机能通过127.0.0.1和IP访问位于本机的服务端，本网络主机（同网段）的客户端也可以通过服务端设备的IP访问

	/* 127.0.0.1属于网络号是127集合中的一个，而所有网络号为127的地址都被称之为回环地址，
	所以回环地址!=127.0.0.1,它们是包含关系，即回环地址包含127.0.0.1，大多数windows和Linux电脑上都将localhost指向了127.0.0.1这个地址，相当于是本机地址。
	网络号为127的任意ip地址。都是内部主机回环地址(loopback),永远都不能出现在主机外部的网络中。
	正常的网络包从ip层进入链路层，然后发送到网络上，而发向loopback地址的包，直接在IP层短路了，也就是发到IP层的包直接被IP层接收了，不再向下发送
	*/

	/*localhost是个域名，而不是一个ip地址。
	之所以我们经常把localhost与127.0.0.1认为是同一个是因为我们使用的大多数电脑上都讲localhost指向了127.0.0.1这个地址。
	可以用它来获取运行在本机上的网络服务。
	在大多数系统中，localhost被指向了IPV4的127.0.0.1和IPV6的::1
	*/

	//0.0.0.0用途：
	//1、当一台主机还没有被分配一个IP地址的时候（DHCP分配IP地址的时候），用于表示主机本身。
	//2、用作默认路由，表示”任意IPV4主机”。
	//3、用来表示目标机器不可用。
	//4、用作服务端，表示本机上的任意IPV4地址。

	//127.0.0.1用途：
	//1、回环测试,通过使用ping 127.0.0.1 测试某台机器上的网络设备，操作系统或者TCP/IP实现是否工作正常。
	//2、DDos攻击防御：网站收到DDos攻击之后，将域名A记录到127.0.0.1，即让攻击者自己攻击自己。
	//3、大部分Web容器测试的时候绑定的本机地址。

	/* 127.0.0.1 是一个环回地址。并不表示“本机”。0.0.0.0才是真正表示“本网络中的本机”。
	在实际应用中，一般我们在服务端绑定端口的时候可以选择绑定到0.0.0.0，这样我的服务访问方就可以通过我的多个ip地址访问我的服务。
	比如我有一台服务器，一个外放地址A,一个内网地址B，如果我绑定的端口指定了0.0.0.0，那么通过内网地址或外网地址都可以访问我的应用。但是如果我之绑定了内网地址，那么通过外网地址就不能访问。
	所以如果绑定0.0.0.0,也有一定安全隐患，对于只需要内网访问的服务，可以只绑定内网地址。
	*/

	/* 结论
	1、0.0.0.0 代表本机的所有ip地址(含本机虚拟网卡ip和实体网卡ip)
	2、服务端绑定到localhost的服务也只能被本机访问。如果修改了host让localhost指向就本机ip，那就能被局域网其他机器访问。
	3、服务端绑定到本机ip的服务能被同网段其他机器访问
	4、0.0.0.0 代表本机的所有ip地址，127.0.0.1和本机ip都包含了，服务端绑定后被同网段其他机器访问
	*/

	/*原理
	localhost
	不联网
	不使用网卡，不受防火墙和网卡限制
	本机访问
	...........
	127.0.0.1
	不联网
	网卡传输，受防火墙和网卡限制
	本机访问
	...........
	本机IP
	联网
	网卡传输 ，受防火墙和网卡限制
	本机或外部访问
	*/
}
