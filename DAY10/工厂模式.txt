工厂模式
工厂模式是最常用的设计模式之一，它属于创建型模式，提供了一种创建对象的最佳方式
工厂模式分为三种细分类型：简单工厂、工厂方法和抽象工厂
使用场景：
1、单个对象的创建过程比较复杂，如需要结合其他类对象做各种初始化操作等场景;
2、常用在需要动态地根据不同的类型来创建不同的对象，即代码中存在大量的if-else分支判断。
总结
1、如果存在多个对象且每个对象的创建逻辑都比较简单时推荐使用简单工厂模式，将多个对象的创建逻辑放入一个工厂类中；
2、如果每个对象的创建逻辑都比较复杂，推荐使用工厂方法模式以避免设计出过于庞大的简单工厂类；
3、如果创建对象的逻辑不复杂，可以考虑通过直接new来创建对象，不需要工厂模式。

YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY

简单工厂：
定义一个工厂类，根据传入的参数不同返回不同的实例
简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类    <---------重点
// 实现一个抽象的产品
type Product interface {
          SetName(name string)
          GetName()string
}
// 实现具体的产品：产品1
type Product1 struct {
         name string
}
func (p1 *Product1) SetName (name string){
        p1.name=name
}
func (p1 *Product1)GetName () string{
      return "产品1的name为"+p1.name
}
// 实现具体的产品：产品2
type Product2 struct {
         name string
}
func (p1 *Product2) SetName (name string){
        p1.name=name
}
func (p1 *Product2)GetName () string{
      return "产品2的name为"+p2.name
}
// 开始实现简单工厂类
// 自定义类型
type Product int
// 定义比较传入参数
const{
       p1 productType = iota    // 0
       p2                                  // 1
}
// 实现简单工厂类
type ProductFactory struct {
}
func (pf ProductFactory ) Create (productType  productType ) Product {   // 返回产品共同接口
                     if productType == p1 {  
                     return &Product1{}
                     }
                     if productType == p2 {    
                     return &Product1{}
                     }
}
// 在需要调用时，可在main包的main函数里：
productFactory := ProductFactory{}
product1:=productFactory.Create(p1)
product1.SetName(p1)
fmt.Println(product1.GetName())

TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

工厂方法：
定义一个创建对象的接口，但让实现这个接口的类来决定示例实例化哪个类，即工厂方法让类的实例化推迟到子类中进行
工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体产品对象。
// 实现一个抽象的产品
type Product interface {
          SetName(name string)
          GetName()string
}
// 实现具体的产品：产品1
type Product1 struct {
         name string
}
func (p1 *Product1) SetName (name string){
        p1.name=name
}
func (p1 *Product1)GetName () string{
      return "产品1的name为"+p1.name
}
// 实现具体的产品：产品2
type Product2 struct {
         name string
}
func (p1 *Product2) SetName (name string){
        p1.name=name
}
func (p1 *Product2)GetName () string{
      return "产品2的name为"+p2.name
}
// 实现一个抽象工厂
type ProductFactory interface{
        Create() Product
}
// 实现一个具体的工厂：产品1的工厂
type Product1Factory struct{
}
func (p1f *Product1Factory) Create() Product{
           return  &Product1{}
}
// 实现一个具体的工厂：产品2的工厂
type Product2Factory struct{
}
func (p1f *Product2Factory) Create() Product{
           return  &Product2{}
}
// 在需要调用时，可在main包的main函数里：
var product1Factory ProductFactory
product1Factory=&Product1Factory{}
p1:=product1Factory.Create()
p1.SetName("p1")
name:=p1.GetName()
fmt.Println(name)


